1. .gitignore

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Virtual environment
venv/
.env/
.venv/

# VSCode settings
.vscode/

# Unit test / coverage
.coverage
coverage.xml
htmlcov/
.junit.xml
results.xml

# Python test cache
.pytest_cache/
nosetests.xml

# Log files
*.log

# Dependency lock files (if not using)
Pipfile.lock
poetry.lock

# Docker artifacts
*.tar
*.img

# macOS
.DS_Store

.git*


2. .vscode/settings.json

{
  "python.pythonPath": "venv/bin/python",
  "python.envFile": "${workspaceFolder}/.env",
  "python.testing.pytestEnabled": true,
  "python.testing.pytestArgs": ["services/orders/tests"],
  "python.formatting.provider": "black",
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.organizeImports": true
  },
  "files.autoSave": "afterDelay",
  "files.autoSaveDelay": 1000,
  "editor.tabSize": 4,
  "editor.rulers": [88],
  "python.analysis.typeCheckingMode": "basic"
}



3. .vscode/extensions.json

{
    "recommendations": [
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-azuretools.vscode-docker",
        "batisteo.vscode-django",
        "ms-toolsai.jupyter",
        "matangover.mypy"
    ]
}


4. ci-lib/vars/scanWithTrivy.groovy

def call() {
    echo '🔍 Running Trivy scan...'
    sh '''
        if ! command -v trivy > /dev/null; then
            echo "Trivy not installed. Skipping scan."
            exit 1
        fi

        IMAGE_NAME="orders"
        docker build -t $IMAGE_NAME .
        trivy image --severity HIGH,CRITICAL $IMAGE_NAME
    '''
}



5. services/orders/app/models.py

from pydantic import BaseModel
from typing import List

class Item(BaseModel):
    name: str
    quantity: int

class Order(BaseModel):
    customer_name: str
    items: List[Item]
    total: float



6. services/orders/app/seed_loader.py

import json
import os

def load_orders():
    data_path = os.path.join(os.path.dirname(__file__), "../data/seed.json")
    with open(data_path, "r") as f:
        orders = json.load(f)
    return orders



7. services/orders/app/main.py

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from .routes import router as orders_router
import logging

# Optional: Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create the FastAPI app instance
app = FastAPI(
    title="Orders Microservice",
    description="Handles customer orders for the e-commerce platform",
    version="1.0.0"
)

# Setup CORS (optional; adjust origins as needed)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Replace with specific domains in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routes
app.include_router(orders_router, prefix="/api/orders", tags=["Orders"])

# Health check route
@app.get("/health", tags=["Health"])
async def health_check():
    return {"status": "ok"}



8. services/orders/app/routes.py

from fastapi import APIRouter, HTTPException
from .models import Order
from .seed_loader import load_orders

router = APIRouter()

# Load orders from seed data
orders_db = load_orders()

@router.get("/", summary="List all orders")
async def get_all_orders():
    return orders_db

@router.get("/{order_id}", summary="Get order by ID")
async def get_order_by_id(order_id: int):
    for order in orders_db:
        if order["id"] == order_id:
            return order
    raise HTTPException(status_code=404, detail="Order not found")

@router.post("/", summary="Create a new order")
async def create_order(order: Order):
    new_order = order.dict()
    new_order["id"] = max(o["id"] for o in orders_db) + 1 if orders_db else 1
    orders_db.append(new_order)
    return {"message": "Order created", "order": new_order}



9. services/orders/tests/test_orders.py

import pytest
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_health_check():
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json() == {"status": "ok"}

def test_get_orders():
    response = client.get("/orders")
    assert response.status_code == 200
    orders = response.json()
    assert isinstance(orders, list)
    assert all("customer_name" in order for order in orders)



10. services/orders/data/seed.json

[
    {
        "order_id": "1001",
        "user_id": "u001",
        "product": "Laptop",
        "quantity": 1,
        "price": 1299.99,
        "status": "confirmed"
    },
    {
        "order_id": "1002",
        "user_id": "u002",
        "product": "Smartphone",
        "quantity": 2,
        "price": 699.5,
        "status": "shipped"
    },
    {
        "order_id": "1003",
        "user_id": "u003",
        "product": "Headphones",
        "quantity": 1,
        "price": 199.99,
        "status": "delivered"
    }
]


11. services/orders/Jenkinsfile

@Library('ci-lib') _  // Shared Jenkins Shared Library

pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '443370713928'
        ECR_REPO = 'services/orders'
        COMMIT_HASH = "${env.GIT_COMMIT ?: 'dev'}"
        IMAGE_TAG = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${COMMIT_HASH}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Image') {
            steps {
                dir('services/orders') {
                    sh "docker build -t ${IMAGE_TAG} ."
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                script {
                    scanWithTrivy(
                        image: "${IMAGE_TAG}",
                        failOnVuln: true,
                        archiveReport: true,
                        sbom: true
                    )
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    pushToECR(
                        region: "${AWS_REGION}",
                        image: "${IMAGE_TAG}",
                        accountId: "${AWS_ACCOUNT_ID}"
                    )
                }
            }
        }

        stage('Install & Test') {
            steps {
                dir('services/orders') {
                    sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install --upgrade pip
                        pip install -r requirements.txt
                        pytest --junitxml=pytest-report.xml --cov=app --cov-report=xml:coverage.xml
                    '''
                }
            }
        }

        stage('Archive Reports') {
            steps {
                dir('services/orders') {
                    archiveArtifacts artifacts: 'pytest-report.xml', fingerprint: true
                    archiveArtifacts artifacts: 'coverage.xml', fingerprint: true
                }
            }
        }
    }

    post {
        always {
            echo 'CI/CD process completed.'
        }
        success {
            echo "Build & Push succeeded for image: ${IMAGE_TAG}"
        }
        failure {
            echo "Pipeline failed. Check logs above."
        }
    }
}



12. services/orders/requirements.txt

attrs==23.2.0
Babel==2.10.3
blinker==1.7.0
certifi==2023.11.17
chardet==5.2.0
click==8.1.6
coverage==7.8.2
cryptography==41.0.7
distro==1.9.0
idna==3.6
iniconfig==2.1.0
Jinja2==3.1.2
jsonpatch==1.32
jsonpointer==2.0
jsonschema==4.10.3
markdown-it-py==3.0.0
MarkupSafe==2.1.5
mdurl==0.1.2
netaddr==0.8.0
netifaces==0.11.0
oauthlib==3.2.2
packaging==25.0
pexpect==4.9.0
pillow==10.2.0
pluggy==1.6.0
ptyprocess==0.7.0
pyparsing==3.1.1
pyrsistent==0.20.0
pytest==8.3.5
pytest-cov==6.1.1
python-dateutil==2.8.2
pytz==2024.1
PyYAML==6.0.1
requests==2.31.0
rich==13.7.1
setuptools==68.1.2
six==1.16.0
typing_extensions==4.10.0
urllib3==2.0.7
wheel==0.42.0


13. services/orders/Dockerfile

# Stage 1 - Builder
FROM python:3.11-slim AS builder

# Set non-root user early for best practice
RUN useradd -m appuser

# Set workdir and install build deps
WORKDIR /app
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --upgrade pip && pip install --no-cache-dir -r requirements.txt

# Stage 2 - Runtime
FROM python:3.11-slim

WORKDIR /app

# Create non-root user again in final stage
RUN useradd -m appuser

# Copy app code and dependencies from builder
COPY --from=builder /usr/local /usr/local
COPY . .

# Set ownership and switch to non-root
RUN chown -R appuser:appuser /app
USER appuser

EXPOSE 8000
CMD ["python", "app/main.py"]



