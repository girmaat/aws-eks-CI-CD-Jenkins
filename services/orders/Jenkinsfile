@Library('ci-lib') _

pipeline {
    agent any

    environment {
        AWS_REGION     = 'us-east-1'
        AWS_ACCOUNT_ID = '443370713928'
        ECR_REPO       = 'services/orders'
        COMMIT_HASH    = "${env.GIT_COMMIT ?: 'dev'}"
        IMAGE_TAG      = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${COMMIT_HASH}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Image') {
            steps {
                dir('services/orders') {
                    sh "docker build --no-cache -t ${IMAGE_TAG} ."
                }
            }
        }
        /*
        stage('Trivy Scan') {
            steps {
                dir('services/orders') {
                    script {
                        try {
                            scanWithTrivy(
                                image: "${IMAGE_TAG}",
                                failOnVuln: false,       // Allow pipeline to continue
                                archiveReport: true,
                                sbom: true
                            )
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è Trivy scan failed. See: ${env.BUILD_URL}artifact/trivy-report.html"
                            echo "‚ö†Ô∏è Trivy scan had issues, but continuing pipeline."
                        }
                    }
                }
            }
        }
        */
        stage('Push to ECR') {
            steps {
                dir('services/orders') {
                    sh """
                        echo "üîê Logging into ECR..."
                        aws ecr get-login-password --region ${AWS_REGION} | \
                        docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

                        echo "üì¶ Pushing image: ${IMAGE_TAG}"
                        docker push ${IMAGE_TAG}
                    """
                }
            }
        }
        /*
        stage('Install & Test') {
            steps {
                dir('services/orders') {
                    sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install --upgrade pip
                        pip install -r requirements.txt
                        pytest --junitxml=pytest-report.xml --cov=app --cov-report=xml:coverage.xml
                    '''
                }
            }
        }

        stage('Archive Reports') {
            steps {
                dir('services/orders') {
                    archiveArtifacts artifacts: 'pytest-report.xml', fingerprint: true
                    archiveArtifacts artifacts: 'coverage.xml', fingerprint: true
                }
            }
        }*/
    }
    
    post {
        always {
            echo 'CI/CD process completed.'
        }
        success {
            echo "Build & Push succeeded for image: ${IMAGE_TAG}"
        }
        failure {
            echo "Pipeline failed. Check logs above."
        }
    }
}
